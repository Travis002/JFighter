/**
 * This class models a Fighter in a battle simulator in which Fighters take
 * turns rolling dice and dealing damage to each other.
 */

package jfighterproject;

import java.util.*;

public class Fighter {
    /**
     * The stats of the Fighter
     */
    private String name;
    private int health;
    private int armor;
    private int attackDice;
    
    // the Fighter's armor degrades by 1 point after every round, if they
    // take damage in that round.
    private static final int ARMOR_DEGRADATION = 1;
    
    // these stats are not set by the player, but kept track of by the class.
    // when the game starts and after every round, this Fighter's health and
    // armor are added to these
    private ArrayList<Integer> healthHistory;
    private ArrayList<Integer> armorHistory;
    
    
    /**
     * Constructs a Fighter with specified attributes provided by the player
     * @param name the name of the Fighter
     * @param health the initial health of the Fighter
     * @param armor the initial armor of the Fighter
     * @param attackDice the amount of dice the Fighter has
     */
    public Fighter(String name, int health, int armor, int attackDice) {
        this.name = name;
        this.health = health;
        this.armor = armor;
        this.attackDice = attackDice;
        this.healthHistory = new ArrayList<>();
        this.armorHistory = new ArrayList<>();
        
        // put the initial health and armor of this Fighter in their stat histories
        this.updateStatHistory();
        
    }

    /**
     * Gets the name of the Fighter
     * @return this.name
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the health of the Fighter
     * @return this.health
     */
    public int getHealth() {
        return health;
    }

    /**
     * Gets the health of the Fighter at round i (index-based, so i starts
     * at 0)
     * @param i the index to retrieve this Fighter's health from
     * @return this.health
     */
    public int getHealth(int i) {
        return this.healthHistory.get(i);
    }
    
    /**
     * Gets the armor of the Fighter
     * @return this.armor
     */
    public int getArmor() {
        return armor;
    }

    /**
     * Gets the armor of the Fighter at round i (index-based, so i starts
     * at 0)
     * @param i the index to retrieve this Fighter's armor from
     * @return this.armor
     */
    public int getArmor(int i) {
        return this.armorHistory.get(i);
    }
    
    /**
     * Gets the attack dice of the Fighter
     * @return this.attackDice
     */
    public int getAttackDice() {
        return attackDice;
    }
    
    /**
     * Rolls an imaginary 6-sided die and returns the result
     * @return a random number between 1 and 6
     */
    public int rollDie() {
        int roll = (int)(Math.random() * 6) + 1;
        return roll;
    }
    
    /**
     * Roll the amount of dice for this Fighter and add the health bonus
     * to those dice rolls
     * @return the total amount of damage generated by this Fighter
     */
    public int generateAttack() {
        // calculate normal attack
        int totalAttack = 0;
        for (int i = 0; i < this.attackDice; i++) {
            totalAttack += rollDie();
        }
        
        // calculate health bonus
        totalAttack += this.health / 2;
        
        return totalAttack;
    }
    
    
    /**
     * This method is called when the other Fighter attacks this Fighter.
     * @param damage the amount of raw damage sent to this Fighter.
     * @return the total amount of real damage taken by this Fighter.
     * Real damage is damage applied to the Fighter's health after
     * the armor absorbs it.
     */
    public int takeDamage(int damage) {
        int realDamage = damage - this.armor;
        
        // take damage (subtract from health)
        if (realDamage > 0) {
            // if the real damage is more than health,
            // then just wipe all the health
            if (this.health - realDamage < 0) {
                realDamage = this.health;
            }
            
            // then take real damage to health
            this.health -= realDamage;
        }
        // if the amount of real damage taken is negative as calculated,
        // then set it to 0 in order to avoid displaying something like "took -4 damage"
        else {
            realDamage = 0;
        }
        
        // degrade the armor if it is not already broken
        if (this.armor > 0) {
            this.armor -= Fighter.ARMOR_DEGRADATION;
            
            // reset armor to 0 if it became negative
            if (this.armor < 0) {
                this.armor = 0;
            }
        }
        
        // return the amount of real damage taken.
        return realDamage;
    }

    /**
     * Puts the current health and armor of the Fighter in their health history
     */
    public void updateStatHistory() {
        this.healthHistory.add(this.health);
        this.armorHistory.add(this.armor);
    }
}
