/**
 * Name: Travis Bode
 * Date: 12/15/23
 * 
 * This Advanced Java project simulates two Fighters with a certain number
 * of dice as determined by the user. They attack each other until one Fighter
 * loses all their health. After each round, a description of how much damage
 * each Fighter generated and how much damage the Fighter took is displayed, in
 * addition to both Fighters' stats after the round. When the game is over, which
 * occurs after either Fighter loses all their health, a brief summary of how
 * much health and armor each Fighter had after every round is displayed.
 * 
 * 
 * To prevent never-ending battles, the program automatically deducts 1 point
 * from the Fighter's armor if they take damage during a round. This way, at least
 * one Fighter will eventually start taking real damage instead of having their
 * armor always absorb all of it.
 * 
 * This JFrame is the main GUI program.
 */
package jfighterproject;


public class JFighterProject extends javax.swing.JFrame {

    private Fighter fighter1;
    private Fighter fighter2;
    private int round;
    private boolean isGameOver;
    
    /**
     * Creates new form NewJFrame
     * This constructor is never used by the program, it is provided here
     * to make me feel better
     */
    public JFighterProject() {
        initComponents();
        this.setTitle("JFighter battle simulator");
    }
    
    /**
     * Creates a JFighter form with two Fighters with custom stats
     * @param f1 the first Fighter
     * @param f2 the second Fighter
     */
    public JFighterProject(Fighter f1, Fighter f2) {
        this();
        this.fighter1 = f1;
        this.fighter2 = f2;
        
        // update the fighter's stats in the Fighter description text boxes
        this.jProgressBarFighter1Health.setMaximum(this.fighter1.getHealth());
        this.jProgressBarFighter2Health.setMaximum(this.fighter2.getHealth());
        this.jProgressBarFighter1Armor.setMaximum(this.fighter1.getArmor());
        this.jProgressBarFighter2Armor.setMaximum(this.fighter2.getArmor());
        this.updatePlayerGUIStats();
        
        
        // display an initial prompt to start the game
        this.jTextAreaBattleOutput.append("Click \"Next Round\" to start the game.\n");
        
        // disable the "New Game" button before the game starts
        this.jButtonNewGame.setEnabled(false);
        this.jButtonNextRound.setEnabled(true);
        
        this.isGameOver = false;
        
        // initialize the round to 0
        this.round = 0;
    }

    private void updatePlayerGUIStats() {
        // update the Fighter's stats in the Fighter description text boxes
        
        // set Fighter 1's name and attack dice display
        this.fighter1Info.setText("Fighter 1: " + this.fighter1.getName());
        this.fighter1Dice.setText("Attack Dice: " + this.fighter1.getAttackDice());
        
        // set Fighter 2's name and attack dice display
        this.fighter2Info.setText("Fighter 2: " + this.fighter2.getName());
        this.fighter2Dice.setText("Attack Dice: " + this.fighter2.getAttackDice());
        
        // set Fighter 1's health display
        this.jProgressBarFighter1Health.setValue(this.fighter1.getHealth());
        this.jLabelFighter1Health.setText("Health:                " + this.fighter1.getHealth());
        
        // set Fighter 2's health display
        this.jProgressBarFighter2Health.setValue(this.fighter2.getHealth());
        this.jLabelFighter2Health.setText("Health:                " + this.fighter2.getHealth());
        
        // set Fighter 1's armor display
        this.jProgressBarFighter1Armor.setValue(this.fighter1.getArmor());
        this.jLabelFighter1Armor.setText("Armor:                " + this.fighter1.getArmor());
        
        // set Fighter 2's armor display
        this.jProgressBarFighter2Armor.setValue(this.fighter2.getArmor());
        this.jLabelFighter2Armor.setText("Armor:                " + this.fighter2.getArmor());
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fighter1Info = new javax.swing.JLabel();
        fighter2Info = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaBattleOutput = new javax.swing.JTextArea();
        jButtonNextRound = new javax.swing.JButton();
        jButtonNewGame = new javax.swing.JButton();
        jProgressBarFighter1Health = new javax.swing.JProgressBar();
        jLabelFighter1Health = new javax.swing.JLabel();
        jLabelFighter2Health = new javax.swing.JLabel();
        jProgressBarFighter2Health = new javax.swing.JProgressBar();
        jLabelFighter1Armor = new javax.swing.JLabel();
        jProgressBarFighter1Armor = new javax.swing.JProgressBar();
        jLabelFighter2Armor = new javax.swing.JLabel();
        jProgressBarFighter2Armor = new javax.swing.JProgressBar();
        fighter1Dice = new javax.swing.JLabel();
        fighter2Dice = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fighter1Info.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fighter1Info.setText("Fighter 1");
        getContentPane().add(fighter1Info, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 6, -1, -1));

        fighter2Info.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fighter2Info.setText("Fighter 2");
        getContentPane().add(fighter2Info, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 6, -1, -1));

        jTextAreaBattleOutput.setColumns(20);
        jTextAreaBattleOutput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTextAreaBattleOutput.setRows(5);
        jScrollPane1.setViewportView(jTextAreaBattleOutput);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 280, 800, 234));

        jButtonNextRound.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonNextRound.setText("Next Round");
        jButtonNextRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextRoundActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonNextRound, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 530, -1, -1));

        jButtonNewGame.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonNewGame.setText("New Game");
        jButtonNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewGameActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonNewGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 530, -1, -1));
        getContentPane().add(jProgressBarFighter1Health, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 310, 30));

        jLabelFighter1Health.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelFighter1Health.setText("Health");
        getContentPane().add(jLabelFighter1Health, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        jLabelFighter2Health.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelFighter2Health.setText("Health");
        getContentPane().add(jLabelFighter2Health, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, -1, -1));
        getContentPane().add(jProgressBarFighter2Health, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 310, 30));

        jLabelFighter1Armor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelFighter1Armor.setText("Armor");
        getContentPane().add(jLabelFighter1Armor, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, -1));
        getContentPane().add(jProgressBarFighter1Armor, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 310, 30));

        jLabelFighter2Armor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelFighter2Armor.setText("Armor");
        getContentPane().add(jLabelFighter2Armor, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, -1, -1));
        getContentPane().add(jProgressBarFighter2Armor, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 230, 310, 30));

        fighter1Dice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fighter1Dice.setText("Attack Dice");
        getContentPane().add(fighter1Dice, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        fighter2Dice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fighter2Dice.setText("Attack Dice");
        getContentPane().add(fighter2Dice, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Moves to the next round when the user clicks the "Next Round" button
     * @param evt 
     */
    private void jButtonNextRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextRoundActionPerformed
        // TODO add your handling code here:
        this.nextRound();
    }//GEN-LAST:event_jButtonNextRoundActionPerformed

    /**
     * Starts a new game when the user clicks the "New Game" button
     * @param evt 
     */
    private void jButtonNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewGameActionPerformed
        // TODO add your handling code here:
        JFighterInputStats jfis = new JFighterInputStats();
        jfis.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonNewGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFighterProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFighterProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFighterProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFighterProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFighterProject().setVisible(true);
            }
        });
        
    }
    
    /**
     * Starts another round of fighting after the "Next Round" button is clicked
     */
    private void nextRound() {
        // prevent the round from happening if the game is already over
        if (!this.isGameOver) {
            this.round++;
            
            // display a header for this round
            this.jTextAreaBattleOutput.append("\n\n---------------Round " + this.round + " Start---------------\n\n");
            
            // each Fighter determines their total damage output
            int f1Attack = this.fighter1.generateAttack();
            int f2Attack = this.fighter2.generateAttack();

            // output each Fighter's damage output
            this.jTextAreaBattleOutput.append(this.fighter1.getName() + " generated " + f1Attack + " damage.\n");
            this.jTextAreaBattleOutput.append(this.fighter2.getName() + " generated " + f2Attack + " damage.\n\n");

            // calculate the difference between each Fighter's generated damage
            int damageSent = Math.abs(f1Attack - f2Attack);

            // output which Fighter sent damage
            if (f1Attack > f2Attack) {
                this.jTextAreaBattleOutput.append(String.format("%s sent %d damage to %s.\n",
                                                this.fighter1.getName(), damageSent, this.fighter2.getName()));
            }
            else if (f2Attack > f1Attack) {
                this.jTextAreaBattleOutput.append(String.format("%s sent %d damage to %s.\n",
                                                this.fighter2.getName(), damageSent, this.fighter1.getName()));
            }
            else {
                this.jTextAreaBattleOutput.append("With both Fighters sending the same amount of damage, "
                                            + "their attacks cancel each other out!\n");
            }
            

            // determine who takes damage, if there is any to take
            if (damageSent > 0) {
                int damageTaken;
                
                // these Fighter stats are used to display information below
                String name;
                int armorBeforeAttack;
                
                // determine which Fighter will take damage
                // Fighter 1 takes damage
                if (f2Attack > f1Attack) {
                    name = this.fighter1.getName();
                    armorBeforeAttack = this.fighter1.getArmor();
                    
                    damageTaken = this.fighter1.takeDamage(damageSent);
                    
                }
                // Fighter 2 takes damage
                else {
                    name = this.fighter2.getName();
                    armorBeforeAttack = this.fighter2.getArmor();
                    
                    damageTaken = this.fighter2.takeDamage(damageSent);
                }
                
                // output a description of what damage was absorbed by armor
                // and what damage was directly taken to health
                if (armorBeforeAttack > 0) {
                    // if the armor absorbed all damage
                    if (armorBeforeAttack >= damageSent) {
                        this.jTextAreaBattleOutput.append(name + "'s armor absorbed "
                            + "all " + damageSent + " damage, so their health remains intact.\n");
                    }
                    // if the armor only absorbed some damage
                    else {
                        this.jTextAreaBattleOutput.append(name + "'s armor absorbed "
                            + armorBeforeAttack + " damage, so they only took " + damageTaken + " damage.\n");
                    }
                }
                // if all damage was directly taken to health
                else {
                    this.jTextAreaBattleOutput.append(name + " absorbed "
                            + damageTaken + " damage themselves.\n");
                }
                // display the armor degradation amount for the Fighter
                this.jTextAreaBattleOutput.append(name + "'s armor took 1 point of damage!\n");
            }
            
            // update both Fighters' health and armor histories after a Fighter takes damage
            this.fighter1.updateStatHistory();
            this.fighter2.updateStatHistory();

            // output each Fighter's health and armor stats
            this.jTextAreaBattleOutput.append(this.fighter1.getName() + "'s health is " + this.fighter1.getHealth() +
                    " and armor is " + this.fighter1.getArmor() + ".\n");
            this.jTextAreaBattleOutput.append(this.fighter2.getName() + "'s health is " + this.fighter2.getHealth() +
                    " and armor is " + this.fighter2.getArmor() + ".\n");

            // update the Fighter's stats in the Fighter description text boxes
            this.updatePlayerGUIStats();

            // display a footer for this round
            this.jTextAreaBattleOutput.append("\n\n---------------Round " + this.round + " End---------------\n\n");

            // check to see if the game is over
            // (the game ends once a Fighter loses all their health)
            if (this.fighter1.getHealth() <= 0 || this.fighter2.getHealth() <= 0) {
                endGame();
            }
        }
    }

    /**
     * Ends the game after a Fighter has lost all their health
     */
    private void endGame() {
        this.isGameOver = true;
        this.jButtonNextRound.setEnabled(false);
        this.jButtonNewGame.setEnabled(true);
        
        
        // display the health and armor history of Fighter 1
        this.jTextAreaBattleOutput.append(this.fighter1.getName() + "'s health and armor history\n\n");
        
        for (int i = 0; i <= this.round; i++) {
            // determine whether this is the stats before fighting or during the battle
            String statHistoryRound;
            if (i > 0) {
                statHistoryRound = String.format("Round %5d:     ", i);
            }
            else {
                statHistoryRound = "At the start:     ";
            }
            
            // header for the health display
            String s = String.format("%s[Health: %d]     ( ", statHistoryRound, this.fighter1.getHealth(i));
            this.jTextAreaBattleOutput.append(s);
            
            // Fighter 1's health history
            for (int health = 0; health < this.fighter1.getHealth(i); health++) {
                this.jTextAreaBattleOutput.append("* ");
            }
            this.jTextAreaBattleOutput.append(")");

            // header for the armor display
            s = String.format("[Armor: %d]          ( ", this.fighter1.getArmor(i));
            this.jTextAreaBattleOutput.append("                           " + s);

            // Fighter 1's armor history
            for (int armor = 0; armor < this.fighter1.getArmor(i); armor++) {
                this.jTextAreaBattleOutput.append("* ");
            }
            this.jTextAreaBattleOutput.append(")\n\n");
        }
        
        // display the health and armor history of Fighter 2
        this.jTextAreaBattleOutput.append(this.fighter2.getName() + "'s health and armor history:\n\n");
        for (int i = 0; i <= this.round; i++) {
            
            // determine whether this is the stats before fighting or during the battle
            String statHistoryRound;
            if (i > 0) {
                statHistoryRound = String.format("Round %5d:     ", i);
            }
            else {
                statHistoryRound = "At the start:     ";
            }
            
            // header for the health display
            String s = String.format("%s[Health: %d]     ( ", statHistoryRound, this.fighter2.getHealth(i));
            this.jTextAreaBattleOutput.append(s);
            
            // Fighter 2's health history
            for (int health = 0; health < this.fighter2.getHealth(i); health++) {
                this.jTextAreaBattleOutput.append("* ");
            }
            this.jTextAreaBattleOutput.append(")");

            // header for the armor display
            s = String.format("[Armor: %d]          ( ", this.fighter2.getArmor(i));
            this.jTextAreaBattleOutput.append("                           " + s);

            // Fighter 2's armor history
            for (int armor = 0; armor < this.fighter2.getArmor(i); armor++) {
                this.jTextAreaBattleOutput.append("* ");
            }
            this.jTextAreaBattleOutput.append(")\n\n");
        }
        
        this.jTextAreaBattleOutput.append("\n\nGame Over!!!\n\n");

        // display the winner of the battle
        
        // if Fighter 1 won
        if (this.fighter1.getHealth() > 0) {
            this.jTextAreaBattleOutput.append(this.fighter1.getName() + " won!\n\n");
        }
        // if Fighter 2 won
        else {
            this.jTextAreaBattleOutput.append(this.fighter2.getName() + " won!\n\n");
        }
        
        // display some footer text after the battle is over
        this.jTextAreaBattleOutput.append("Scroll up to view the health and armor history"
                                + " of both fighters.\n\n");
        this.jTextAreaBattleOutput.append("Press \"New Game\" to begin a new battle.\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fighter1Dice;
    private javax.swing.JLabel fighter1Info;
    private javax.swing.JLabel fighter2Dice;
    private javax.swing.JLabel fighter2Info;
    private javax.swing.JButton jButtonNewGame;
    private javax.swing.JButton jButtonNextRound;
    private javax.swing.JLabel jLabelFighter1Armor;
    private javax.swing.JLabel jLabelFighter1Health;
    private javax.swing.JLabel jLabelFighter2Armor;
    private javax.swing.JLabel jLabelFighter2Health;
    private javax.swing.JProgressBar jProgressBarFighter1Armor;
    private javax.swing.JProgressBar jProgressBarFighter1Health;
    private javax.swing.JProgressBar jProgressBarFighter2Armor;
    private javax.swing.JProgressBar jProgressBarFighter2Health;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaBattleOutput;
    // End of variables declaration//GEN-END:variables
}
